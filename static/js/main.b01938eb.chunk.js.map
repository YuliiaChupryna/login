{"version":3,"sources":["redux/store.js","LoginForm.js","redux/constants.js","ProjectsList.js","ResetPassword.js","App.js","index.js"],"names":["getEmail","state","email","getPassword","password","getIsEmailError","isEmailError","getIsPasswordError","isPasswordError","getIsResetClicked","isResetClicked","getIsResettingEmailError","isResettingEmailError","setIsResetClicked","isClicked","type","initialState","areInputsReseted","resettingEmail","store","createStore","action","areReseted","isError","mapDispatchToProps","setEmail","setPassword","setIsEmailError","setIsPasswordError","connect","useState","inputingEmail","setInputingEmail","isInputingEmailValid","setIsInputingEmailValid","inputingPassword","setInputingPassword","isInputingPasswordValid","setIsInputingPasswordValid","setters","handleChangeInput","regExp","value","target","test","className","onSubmit","event","preventDefault","cn","placeholder","onChange","disabled","onClick","projects","ProjectsList","map","project","href","setResettingEmail","setIsResettingEmailError","src","alt","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b01938eb.chunk.js","sourcesContent":["import { createStore } from 'redux';\r\n\r\nconst SET_EMAIL = 'SET_EMAIL';\r\nconst SET_PASSWORD = 'SET_PASSWORD';\r\nconst SET_ARE_INPUTS_RESETED='SET_ARE_INPUTS_RESETED';\r\nconst SET_IS_EMAIL_ERROR='SET_IS_EMAIL_ERROR';\r\nconst SET_IS_PASSWORD_ERROR='SET_IS_PASSWORD_ERROR';\r\nconst SET_IS_RESET_CLICKED='SET_IS_RESET_CLICKED';\r\nconst SET_RESETTING_EMAIL = 'SET_RESETTING_EMAIL';\r\nconst SET_IS_RESETTING_EMAIL_ERROR = 'SET_IS_RESETTING_EMAIL_ERROR';\r\n\r\nexport const getEmail = state => state.email;\r\nexport const getPassword = state => state.password;\r\nexport const getAreInputsReseted = state => state.areInputsReseted;\r\nexport const getIsEmailError = state => state.isEmailError;\r\nexport const getIsPasswordError = state => state.isPasswordError;\r\nexport const getIsResetClicked = state => state.isResetClicked;\r\nexport const getResettingEmail = state => state.resettingEmail;\r\nexport const getIsResettingEmailError = state => state.isResettingEmailError;\r\n\r\nexport const setPassword = (password) => ({\r\n    type: SET_PASSWORD,\r\n    password,\r\n});\r\n\r\nexport const setEmail = (email) => ({\r\n    type: SET_EMAIL,\r\n    email\r\n});\r\n\r\nexport const setAreInputsReseted = (areReseted) => ({\r\n    type: SET_ARE_INPUTS_RESETED,\r\n    areReseted,\r\n});\r\n\r\nexport const setIsEmailError = (isError) => ({\r\n    type: SET_IS_EMAIL_ERROR,\r\n    isError,\r\n});\r\n\r\nexport const setIsPasswordError = (isError) => ({\r\n    type: SET_IS_PASSWORD_ERROR,\r\n    isError,\r\n});\r\n\r\nexport const setIsResetClicked = (isClicked) => ({\r\n    type: SET_IS_RESET_CLICKED,\r\n    isClicked,\r\n});\r\n\r\nexport const setResettingEmail = (email) => ({\r\n    type: SET_RESETTING_EMAIL,\r\n    email,\r\n});\r\n\r\nexport const setIsResettingEmailError = (isError) => ({\r\n    type: SET_IS_RESETTING_EMAIL_ERROR,\r\n    isError,\r\n});\r\n\r\nconst initialState = {\r\n    email: '',\r\n    password: '',\r\n    areInputsReseted: true,\r\n    isEmailError: null,\r\n    isPasswordError: null,\r\n    isResetClicked: false,\r\n    resettingEmail: '',\r\n    isResettingEmailError: null,\r\n};\r\n\r\nconst rootReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case SET_EMAIL:\r\n            return {\r\n                ...state,\r\n                email: action.email,\r\n            };\r\n        case SET_PASSWORD:\r\n            return {\r\n                ...state,\r\n                password: action.password,\r\n            };\r\n        case SET_ARE_INPUTS_RESETED:\r\n            return {\r\n                ...state,\r\n                areInputsReseted: action.areReseted,\r\n            };\r\n        case SET_IS_EMAIL_ERROR:\r\n            return {\r\n                ...state,\r\n                isEmailError: action.isError,\r\n            };\r\n        case SET_IS_PASSWORD_ERROR:\r\n            return {\r\n                ...state,\r\n                isPasswordError: action.isError,\r\n            };\r\n        case SET_IS_RESET_CLICKED:\r\n            return {\r\n                ...state,\r\n                isResetClicked: action.isClicked,\r\n            };\r\n        case SET_RESETTING_EMAIL:\r\n            return {\r\n                ...state,\r\n                resettingEmail: action.email,\r\n            };\r\n        case SET_IS_RESETTING_EMAIL_ERROR:\r\n            return {\r\n                ...state,\r\n                isResettingEmailError: action.isError,\r\n            };\r\n        default:\r\n            return state;\r\n\r\n    }\r\n};\r\n\r\nexport const store = createStore(rootReducer, initialState);\r\n\r\n","import React, {useState} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport cn from 'classnames';\r\nimport { debounce } from 'debounce';\r\nimport {\r\n    getEmail,\r\n    getPassword,\r\n    getIsEmailError,\r\n    getIsPasswordError,\r\n    setEmail,\r\n    setPassword,\r\n    setIsEmailError,\r\n    setIsPasswordError,\r\n    setIsResetClicked\r\n} from \"./redux/store\";\r\n\r\nconst LoginForm = ({\r\n  setEmail,\r\n  setPassword,\r\n  isEmailError,\r\n  isPasswordError,\r\n  setIsEmailError,\r\n  setIsPasswordError,\r\n  setIsResetClicked,\r\n}) => {\r\n    const [inputingEmail, setInputingEmail] = useState('');\r\n    const [isInputingEmailValid, setIsInputingEmailValid] = useState(null);\r\n    const [inputingPassword, setInputingPassword] = useState('');\r\n    const [isInputingPasswordValid, setIsInputingPasswordValid] = useState(null);\r\n\r\n    const setters = {\r\n        email: [setInputingEmail, setIsInputingEmailValid, setIsEmailError],\r\n        password: [setInputingPassword, setIsInputingPasswordValid, setIsPasswordError],\r\n    };\r\n\r\n\r\n    const handleChangeInput = ({ target: { value }}, type, regExp) => {\r\n        setters[type][2](false);\r\n        setters[type][0](value);\r\n\r\n        if (regExp.test(value)) {\r\n            setters[type][1](true);\r\n        } else {\r\n            setters[type][1](false);\r\n        }\r\n\r\n        if (value === '') {\r\n            setters[type][1](null);\r\n        }\r\n    };\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        if (isInputingEmailValid === false || inputingEmail === '') {\r\n            setIsInputingEmailValid(false);\r\n            setIsEmailError(true);\r\n        }\r\n\r\n        if (isInputingPasswordValid === false || inputingPassword === '') {\r\n            setIsInputingPasswordValid(false);\r\n            setIsPasswordError(true);\r\n        }\r\n\r\n        if (isInputingEmailValid && isInputingPasswordValid) {\r\n            setEmail(inputingEmail);\r\n            setPassword(inputingPassword);\r\n\r\n            setIsInputingEmailValid(null);\r\n            setIsInputingPasswordValid(null);\r\n\r\n            setInputingPassword('');\r\n            setInputingEmail('');\r\n        }\r\n    };\r\n\r\n    const handleResetClick = () => {\r\n        setIsResetClicked(true);\r\n    };\r\n\r\n    return (\r\n        <div className=\"sign-in__login\">\r\n            <h2\r\n                className=\"sign-in__heading\"\r\n            >\r\n                Welcome back\r\n            </h2>\r\n            <p\r\n                className=\"sign-in__text\"\r\n            >\r\n                Sign in to continue to IO technologies\r\n            </p>\r\n        <form onSubmit={handleSubmit}>\r\n            <div className=\"sign-in__input-wrapper\">\r\n                <input\r\n                    value={inputingEmail}\r\n                    className={cn(\r\n                        'sign-in__input',\r\n                        { 'sign-in__input--valid': isInputingEmailValid },\r\n                        { 'sign-in__input--error': isInputingEmailValid === false},\r\n                        { 'sign-in__input--submit-err': isEmailError }\r\n                    )}\r\n                    type=\"text\"\r\n                    placeholder=\"Your email\"\r\n                    onChange={event => handleChangeInput(event, 'email', /^[a-zA-Z]+[a-zA-Z0-9\\.\\_\\-]*@[^\\.]+\\.+[a-zA-Z]+[a-zA-Z]+/g)}\r\n                 />\r\n\r\n                {isEmailError && (<p className=\"sign-in__error-message\">Oops! Your email is not valid</p>)}\r\n            </div>\r\n\r\n            <div className=\"sign-in__input-wrapper\">\r\n                <input\r\n                    className={cn(\r\n                        'sign-in__input',\r\n                        { 'sign-in__input--valid': isInputingPasswordValid },\r\n                        { 'sign-in__input--error': isInputingPasswordValid === false },\r\n                        { 'sign-in__input--submit-err': isPasswordError }\r\n                    )}\r\n                    value={inputingPassword}\r\n                    type=\"password\"\r\n                    placeholder=\"Password\"\r\n                    onChange={event => handleChangeInput(event, 'password', /.{8,}/g)}\r\n                />\r\n\r\n                {isPasswordError && <p className=\"sign-in__error-message\">Oops! Your password is not valid</p>}\r\n            </div>\r\n\r\n            <button\r\n                className=\"sign-in__submit-btn\"\r\n                type=\"submit\"\r\n                disabled={isEmailError && isPasswordError}\r\n            >\r\n                Log in\r\n                <span className=\"arrow\">🡢</span>\r\n            </button>\r\n\r\n            <p className=\"sign-in__forgotten-text\">Forgot your password</p>\r\n            <button\r\n                type=\"button\"\r\n                className=\"sign-in__reset-btn\"\r\n                onClick={handleResetClick}\r\n            >\r\n                Reset\r\n            </button>\r\n        </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    email: getEmail(state),\r\n    password: getPassword(state),\r\n    isEmailError: getIsEmailError(state),\r\n    isPasswordError: getIsPasswordError(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    setEmail,\r\n    setPassword,\r\n    setIsEmailError,\r\n    setIsPasswordError,\r\n    setIsResetClicked,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginForm);\r\n","export const projects = [\r\n    'Flirchi',\r\n    'io',\r\n    'company name',\r\n    'facenews.com',\r\n    'technologies',\r\n    'patterns',\r\n    'innovations',\r\n    'company product',\r\n];\r\n","import React from 'react';\r\nimport { projects } from \"./redux/constants\";\r\n\r\nconst ProjectsList = () => {\r\n    return (\r\n        <div className=\"sign-in__projects\">\r\n            <h2\r\n                className=\"sign-in__heading\"\r\n            >\r\n                Hi, <span className=\"sign-in__person-name\">Nikita!</span>\r\n            </h2>\r\n            <p\r\n                className=\"sign-in__text\"\r\n            >\r\n                Please choose your project.\r\n            </p>\r\n            <ul className=\"sign-in__projects-list\">\r\n                {projects.map(project => (\r\n                    <>\r\n                        <li className=\"sign-in__li\">\r\n                            <a className=\"sign-in__link\" href=\"/\">{project}</a>\r\n                        </li>\r\n                        <hr\r\n                            className=\"sign-in__hr\"\r\n                        />\r\n                    </>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProjectsList;\r\n","import React, {useState} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    setResettingEmail,\r\n    setIsResettingEmailError,\r\n    getIsResettingEmailError,\r\n    setIsResetClicked\r\n} from \"./redux/store\";\r\nimport cn from \"classnames\";\r\n\r\nconst ResetPassword = ({\r\n  setIsResetClicked,\r\n  setResettingEmail,\r\n  setIsResettingEmailError,\r\n  isResettingEmailError\r\n}) => {\r\n    const [inputingEmail, setInputingEmail] = useState('');\r\n    const [isInputingEmailValid, setIsInputingEmailValid] = useState(null);\r\n\r\n    const handleChangeInput = ({ target: { value }}, type, regExp) => {\r\n        setIsResettingEmailError(false);\r\n        setInputingEmail(value);\r\n\r\n        if (regExp.test(value)) {\r\n            setIsInputingEmailValid(true);\r\n        } else {\r\n            setIsInputingEmailValid(false);\r\n        }\r\n\r\n        if (value === '') {\r\n            setIsInputingEmailValid(null);\r\n        }\r\n    };\r\n\r\n    const goBack = () => {\r\n        setIsResetClicked(false);\r\n        setInputingEmail('');\r\n        setIsInputingEmailValid(null);\r\n        setIsResettingEmailError(false);\r\n    };\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        if (isInputingEmailValid === false || inputingEmail === '') {\r\n            setIsInputingEmailValid(false);\r\n            setIsResettingEmailError(true);\r\n        }\r\n\r\n        if (isInputingEmailValid) {\r\n            setResettingEmail(inputingEmail);\r\n            setIsInputingEmailValid(null);\r\n            setInputingEmail('');\r\n            setIsResetClicked(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"sign-in__reset\">\r\n            <button\r\n                type=\"button\"\r\n                className=\"sign-in__button-back\"\r\n                onClick={goBack}\r\n            >\r\n                <img src=\"./images/arrow-back.png\" alt=\"Back\" />\r\n            </button>\r\n            <h2 className=\"sign-in__heading\">Forgot password?</h2>\r\n            <form onSubmit={handleSubmit}>\r\n                <div className=\"sign-in__input-wrapper\">\r\n                    <input\r\n                        value={inputingEmail}\r\n                        className={cn(\r\n                            'sign-in__input',\r\n                            { 'sign-in__input--valid': isInputingEmailValid },\r\n                            { 'sign-in__input--error': isInputingEmailValid === false},\r\n                            { 'sign-in__input--submit-err': isResettingEmailError }\r\n                        )}\r\n                        type=\"text\"\r\n                        placeholder=\"Your email\"\r\n                        onChange={event => handleChangeInput(event, 'email', /[^@]+@[^\\.]+\\.+[a-zA-Z]+[a-zA-Z]+/g)}\r\n                    />\r\n\r\n                    {isResettingEmailError && (<p className=\"sign-in__error-message\">Oops! Your email is not valid</p>)}\r\n                </div>\r\n\r\n                <button\r\n                    className=\"sign-in__submit-btn\"\r\n                    type=\"submit\"\r\n                    disabled={isResettingEmailError}\r\n                >\r\n                    Send me instructions\r\n                </button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isResettingEmailError: getIsResettingEmailError(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    setIsResetClicked,\r\n    setResettingEmail,\r\n    setIsResettingEmailError,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ResetPassword);\r\n","import React from 'react';\nimport './App.scss';\nimport LoginForm from \"./LoginForm\";\nimport { getEmail, getPassword, getIsResetClicked } from \"./redux/store\";\nimport { connect } from 'react-redux';\nimport ProjectsList from \"./ProjectsList\";\nimport ResetPassword from \"./ResetPassword\";\n\nconst App = ({ password, email, isResetClicked }) =>  (\n    <section className=\"sign-in\">\n        <div className=\"sign-in__left-content\">\n            <article className=\"sign-in__support\">\n                <div className=\"sign-in__name\">\n                     <h2 className=\"sign-in__logo\">Technologies</h2>\n                </div>\n                    <p className=\"sign-in__instruction-text\">Get how-to help and instructions or specific features in</p>\n                <div className=\"sign-in__support-buttons\">\n                    <button\n                        className=\"sign-in__support-btn\"\n                        type=\"button\">\n                        Help center\n                    </button>\n                    <span>or</span>\n                    <button\n                        className=\"sign-in__support-btn\"\n                        type=\"button\">\n                        Support\n                    </button>\n                </div>\n            </article>\n        </div>\n        <div className=\"sign-in__right-content\">\n            {!email && !password && !isResetClicked && <LoginForm />}\n            {email && password && <ProjectsList />}\n            {isResetClicked && <ResetPassword />}\n        </div>\n    </section>\n);\n\nconst mapStateToProps = (state) => ({\n    email: getEmail(state),\n    password: getPassword(state),\n    isResetClicked: getIsResetClicked(state),\n});\n\nexport default connect(mapStateToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\nimport App from './App';\nimport './App.scss';\n\nReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}